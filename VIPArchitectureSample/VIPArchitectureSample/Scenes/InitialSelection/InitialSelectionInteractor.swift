//
//  InitialSelectionInteractor.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 23/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias InitialSelectionInteractable = InitialSelectionBusinessLogic & InitialSelectionDataStore

protocol InitialSelectionBusinessLogic {
  
  func doRequest(_ request: InitialSelectionModel.Request)
}

protocol InitialSelectionDataStore {
  var dataSource: InitialSelectionModel.DataSource { get }
}

final class InitialSelectionInteractor: InitialSelectionDataStore {
  
  var dataSource: InitialSelectionModel.DataSource
  
  private var factory: InitialSelectionInteractorFactorable.InteractableFactory
  private var presenter: InitialSelectionPresentationLogic
  
  init(factory: InitialSelectionInteractorFactorable.InteractableFactory, viewController: InitialSelectionDisplayLogic?, dataSource: InitialSelectionModel.DataSource) {
    self.factory = factory
    self.dataSource = dataSource
    self.presenter = factory.makePresenter(viewController: viewController)
  }
}


// MARK: - InitialSelectionBusinessLogic
extension InitialSelectionInteractor: InitialSelectionBusinessLogic {
  
  func doRequest(_ request: InitialSelectionModel.Request) {
    DispatchQueue.global(qos: .userInitiated).async { [self] in
      
      switch request {
        
      case .prepareOptions:
        self.presenter.presentResponse(.prepareOptions)
        
      default:
        break
      }
    }
  }
}


// MARK: - Private Zone
private extension InitialSelectionInteractor {
  
}
