//
//  CharactersListMarvelViewController.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 5/7/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import UIKit

protocol CharactersListMarvelDisplayLogic where Self: UIViewController {
  
  func displayViewModel(_ viewModel: CharactersListMarvelModel.ViewModel)
}

final class CharactersListMarvelViewController: BaseViewController {
  
  typealias CharactersListMarvelFactory = CharactersListMarvelInteractorFactorable & CharactersListMarvelRouterFactorable

  private let mainView: CharactersListMarvelView
  private var interactor: CharactersListMarvelInteractable!
  private var router: CharactersListMarvelRouting!
  override var isNavigationBarHidden: Bool { false }

  
  required init(factory: CharactersListMarvelFactory, mainView: CharactersListMarvelView, dataSource: CharactersListMarvelModel.DataSource) {
    self.mainView = mainView
    
    super.init(nibName: nil, bundle: nil)
    
    let interactorFactory = factory as! CharactersListMarvelInteractorFactorable.InteractableFactory
    interactor = factory.makeInteractor(factory: interactorFactory, viewController: self, dataSource: dataSource)
    router = factory.makeRouter(viewController: self)
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()
    interactor.doRequest(.prepareCharactersListMarvel(page: 0))
  }
  
  override func loadView() {
    mainView.delegate = self
    view = mainView
  }

  @available(*, unavailable)
  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented, You shouldn't initialize the ViewController using Storyboards")
  }
}

// MARK: - CharactersListMarvelDisplayLogic
extension CharactersListMarvelViewController: CharactersListMarvelDisplayLogic {

  func displayViewModel(_ viewModel: CharactersListMarvelModel.ViewModel) {
    DispatchQueue.main.async {
      switch viewModel {

      case let .prepareCharactersListMarvel(viewModelData):
        self.navigationItem.title = viewModelData.title
        self.navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
        self.mainView.updateDataSource(with: viewModelData)
        
      case let .showError(model):
        self.router.routeTo(.showError(model:model))
        
      case let .showDetail(id):
        self.router.routeTo(.showCharacterDetailMarvel(id: id))
      }
    }
  }
  
  func errorRetryRequest() {
    self.mainView.retryRequest()
  }
}


// MARK: - CharactersListMarvelViewDelegate
extension CharactersListMarvelViewController: CharactersListMarvelViewDelegate {
  func nextPage(page: Int) {
    interactor.doRequest(.prepareCharactersListMarvel(page: page))
  }
  
  
  func itemPressed(index: Int) {
    interactor.doRequest(.itemPressed(index: index))
  }
}


// MARK: - Private Zone
private extension CharactersListMarvelViewController {
  

}
