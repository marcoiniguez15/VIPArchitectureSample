//
//  CharactersListRickMortyInteractor.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 23/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias CharactersListRickMortyInteractable = CharactersListRickMortyBusinessLogic & CharactersListRickMortyDataStore

protocol CharactersListRickMortyBusinessLogic {
  
  func doRequest(_ request: CharactersListRickMortyModel.Request)
}

protocol CharactersListRickMortyDataStore {
  var dataSource: CharactersListRickMortyModel.DataSource { get }
}

final class CharactersListRickMortyInteractor: CharactersListRickMortyDataStore {
  
  var dataSource: CharactersListRickMortyModel.DataSource
  
  private var factory: CharactersListRickMortyInteractorFactorable.InteractableFactory
  private var presenter: CharactersListRickMortyPresentationLogic
  
  init(factory: CharactersListRickMortyInteractorFactorable.InteractableFactory, viewController: CharactersListRickMortyDisplayLogic?, dataSource: CharactersListRickMortyModel.DataSource) {
    self.factory = factory
    self.dataSource = dataSource
    self.presenter = factory.makePresenter(viewController: viewController)
  }
}


// MARK: - CharactersListRickMortyBusinessLogic
extension CharactersListRickMortyInteractor: CharactersListRickMortyBusinessLogic {
  
  func doRequest(_ request: CharactersListRickMortyModel.Request) {
    DispatchQueue.global(qos: .userInitiated).async {
      
      switch request {
        
      case let .prepareCharactersListRickMorty(page, nameFilter):
        self.prepareCharactersListRickMorty(page: page, nameFilter: nameFilter)
      }
    }
  }
}


// MARK: - Private Zone
private extension CharactersListRickMortyInteractor {
  
  func prepareCharactersListRickMorty(page: Int, nameFilter: String?) {
    if page <= (self.dataSource.numberPages - 1) {
      let service = factory.makeApiService()
      if page == 0 {
        LoaderView.toggleUniversalLoadingView(true)
      }
      if let name = nameFilter {
        if let nameFilterDataSource = dataSource.nameFilter, nameFilterDataSource != name {
          self.dataSource.characterList.removeAll()
        }
        
        if dataSource.nameFilter == nil {
          self.dataSource.characterList.removeAll()
        }
        dataSource.nameFilter = name
      }
      service.getAllCharactersRickAndMorty(page: page, nameFilter: nameFilter) { (result, _) in
        LoaderView.toggleUniversalLoadingView(false)
        switch result {
        case let .success(list):
          if let data = list.results, let info = list.info, let numberPages =  info.pages {
            self.dataSource.numberPages = numberPages
            self.dataSource.characterList.append(contentsOf: data)
            self.presenter.presentResponse(.prepareCharactersListRickMorty(data: self.dataSource.characterList))
          }
        case .failure:
          let errorModel = ErrorHelper.createGenericError()
          self.presenter.presentResponse(.showError(model: errorModel))
        }
      }
    }
  
  }
}
