//
//  CharactersListInteractor.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 23/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias CharactersListInteractable = CharactersListBusinessLogic & CharactersListDataStore

protocol CharactersListBusinessLogic {
  
  func doRequest(_ request: CharactersListModel.Request)
}

protocol CharactersListDataStore {
  var dataSource: CharactersListModel.DataSource { get }
}

final class CharactersListInteractor: CharactersListDataStore {
  
  var dataSource: CharactersListModel.DataSource
  
  private var factory: CharactersListInteractorFactorable.InteractableFactory
  private var presenter: CharactersListPresentationLogic
  
  init(factory: CharactersListInteractorFactorable.InteractableFactory, viewController: CharactersListDisplayLogic?, dataSource: CharactersListModel.DataSource) {
    self.factory = factory
    self.dataSource = dataSource
    self.presenter = factory.makePresenter(viewController: viewController)
  }
}


// MARK: - CharactersListBusinessLogic
extension CharactersListInteractor: CharactersListBusinessLogic {
  
  func doRequest(_ request: CharactersListModel.Request) {
    DispatchQueue.global(qos: .userInitiated).async {
      
      switch request {
        
      case let .prepareCharactersList(page):
        self.prepareCharactersList(page: page)
      }
    }
  }
}


// MARK: - Private Zone
private extension CharactersListInteractor {
  
  func prepareCharactersList(page: Int) {
    let service = factory.makeApiService()
    if page == 0 {
      LoaderView.toggleUniversalLoadingView(true)
    }
    service.getAllCharactersRickAndMorty(page: page) { (result, _) in
      LoaderView.toggleUniversalLoadingView(false)
      switch result {
      case let .success(list):
        if let data = list.results {
          self.dataSource.characterList.append(contentsOf: data)
          self.presenter.presentResponse(.prepareCharactersList(data: self.dataSource.characterList))
        }
      case .failure:
        let errorModel = ErrorHelper.createGenericError()
        self.presenter.presentResponse(.showError(model: errorModel))
      }
    }
  }
}
