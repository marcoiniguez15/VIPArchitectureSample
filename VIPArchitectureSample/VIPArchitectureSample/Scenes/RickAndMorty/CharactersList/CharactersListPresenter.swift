//
//  CharactersListPresenter.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 23/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

protocol CharactersListPresentationLogic {
  func presentResponse(_ response: CharactersListModel.Response)
}

final class CharactersListPresenter {
  private weak var viewController: CharactersListDisplayLogic?
  
  init(viewController: CharactersListDisplayLogic?) {
    self.viewController = viewController
  }
}


// MARK: - CharactersListPresentationLogic
extension CharactersListPresenter: CharactersListPresentationLogic {
  
  func presentResponse(_ response: CharactersListModel.Response) {
    
    switch response {
      
    case let .prepareCharactersList(list):
      self.prepareCharactersList(data: list)
      
    case let .showError(model):
      self.viewController?.displayViewModel(.showError(model: model))
    }
  }
}


// MARK: - Private Zone
private extension CharactersListPresenter {
  func prepareCharactersList(data: [ResultRickAndMorty]) {
    let title = "Characters List"
    let items = data.compactMap { character -> CharactersListModel.CellModel in
        var imageURL = URL(string: "")
        if let img = character.image {
            imageURL = URL(string: img)
        }
        return CharactersListModel.CellModel(name: character.name ?? "", imageURL: imageURL, status: character.status?.rawValue, species: character.species)
    }
    
    self.viewController?.displayViewModel(.prepareCharactersList(
                                            viewModelData: CharactersListModel.ViewDataSource(title: title, items: items)))
  }
}
