//
//  ArtistsListPresenter.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 23/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

protocol ArtistsListPresentationLogic {
  func presentResponse(_ response: ArtistsListModel.Response)
}

final class ArtistsListPresenter {
  private weak var viewController: ArtistsListDisplayLogic?
  
  init(viewController: ArtistsListDisplayLogic?) {
    self.viewController = viewController
  }
}


// MARK: - ArtistsListPresentationLogic
extension ArtistsListPresenter: ArtistsListPresentationLogic {
  
  func presentResponse(_ response: ArtistsListModel.Response) {
    
    switch response {
      
    case let .prepareArtistList(list):
      self.prepareArtistList(data: list)
      
    case let .showError(model):
      self.viewController?.displayViewModel(.showError(model: model))
      
    case let .showDetail(id):
      self.viewController?.displayViewModel(.showDetail(id: id))
    }
  }
}


// MARK: - Private Zone
private extension ArtistsListPresenter {
  
  func prepareArtistList(data: [ArtistsListItemEntity]) {
    let title = "Top Artists"
    
    let items = data.compactMap { artist -> ArtistsListModel.CellModel in
        return ArtistsListModel.CellModel(name: artist.name, imageURL: artist.imageURL)
    }
    
    self.viewController?.displayViewModel(.prepareArtistList(viewModelData: ArtistsListModel.ViewDataSource(title: title, items: items)))
  }
}
