//
//  ArtistsListInteractor.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 23/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias ArtistsListInteractable = ArtistsListBusinessLogic & ArtistsListDataStore

protocol ArtistsListBusinessLogic {

    func doRequest(_ request: ArtistsListModel.Request)
}

protocol ArtistsListDataStore {
    var dataSource: ArtistsListModel.DataSource { get }
}

final class ArtistsListInteractor: ArtistsListDataStore {

    var dataSource: ArtistsListModel.DataSource

    private var factory: ArtistsListInteractorFactorable.InteractableFactory
    private var presenter: ArtistsListPresentationLogic

    init(factory: ArtistsListInteractorFactorable.InteractableFactory, viewController: ArtistsListDisplayLogic?, dataSource: ArtistsListModel.DataSource) {
        self.factory = factory
        self.dataSource = dataSource
        self.presenter = factory.makePresenter(viewController: viewController)
    }
}


// MARK: - ArtistsListBusinessLogic
extension ArtistsListInteractor: ArtistsListBusinessLogic {

    func doRequest(_ request: ArtistsListModel.Request) {
        DispatchQueue.global(qos: .userInitiated).async {

            switch request {

            case let .prepareArtistList(page):
                self.prepareArtistList(page: page)

            case let .itemPressed(index):
                self.presenter.presentResponse(.showDetail(id: self.dataSource.artistList[index].id))
            }
        }
    }
}


// MARK: - Private Zone
private extension ArtistsListInteractor {
    
    func prepareArtistList(page: Int) {
        let useCase = factory.makeFetchCharactersUseCase()
        if page == 1 {
            LoaderView.toggleUniversalLoadingView(true)
        }

        Task { @MainActor in
            do {
                let result = try await useCase.execute(FetchArtistsListUseCaseParameters(page: page, limit: 50))
                LoaderView.toggleUniversalLoadingView(false)
                self.dataSource.artistList.append(contentsOf: result.items)
                self.presenter.presentResponse(.prepareArtistList(data: self.dataSource.artistList))
            } catch {
                LoaderView.toggleUniversalLoadingView(false)
                let errorModel = ErrorHelper.createGenericError()
                self.presenter.presentResponse(.showError(model: errorModel))
            }
        }
    }
}
