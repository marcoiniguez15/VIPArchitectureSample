//
//  ArtistDetailView.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 24/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import UIKit

protocol ArtistDetailViewDelegate where Self: UIViewController {
  
  func reloadView()
}

final class ArtistDetailView: BaseView {
  
  weak var delegate: ArtistDetailViewDelegate?
  
  @IBOutlet weak var artistsTableView: UITableView!

  private var dataSource: ArtistDetailModel.ViewDataSource?

  override init(frame: CGRect) {
    super.init(frame: frame)
    setupUIComponents()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setupUIComponents()
  }
  func updateDataSource(with dataSource: ArtistDetailModel.ViewDataSource) {
    self.dataSource = dataSource
    self.artistsTableView.reloadData()
  }
  func reloadUIComponents() {
    self.artistsTableView.tableFooterView = UIView()
    self.artistsTableView.reloadData()
  }
  func retryRequest() {
    delegate?.reloadView()
  }
}

private extension ArtistDetailView {
  func setupUIComponents() {
    artistsTableView.allowsMultipleSelection = false
    self.reloadUIComponents()
    self.artistsTableView.register(R.nib.artistDetailTableViewCell)
    artistsTableView.separatorStyle = .singleLine
    artistsTableView.separatorColor = UIColor.white
    artistsTableView.separatorInset = UIEdgeInsets.zero
    artistsTableView.layoutMargins = UIEdgeInsets.zero
    artistsTableView.showsVerticalScrollIndicator = false
  }
}

// MARK: - UITableview
extension ArtistDetailView:  UITableViewDataSource, UITableViewDelegate {
  func numberOfSections(in tableView: UITableView) -> Int {
    1
  }
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    if let data = dataSource {
      return data.items.count
    }
    return 0
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    guard let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.artistDetailTableViewCell, for: indexPath) else {
      return UITableViewCell()
    }
    if let data = dataSource  {
      cell.prepareCell(with: data.items[indexPath.row])
    }
    return cell
  }
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
   
  }
}
