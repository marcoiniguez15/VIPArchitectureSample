//
//  ArtistDetailInteractor.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 24/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias ArtistDetailInteractable = ArtistDetailBusinessLogic & ArtistDetailDataStore

protocol ArtistDetailBusinessLogic {
  
  func doRequest(_ request: ArtistDetailModel.Request)
}

protocol ArtistDetailDataStore {
  var dataSource: ArtistDetailModel.DataSource { get }
}

final class ArtistDetailInteractor: ArtistDetailDataStore {
  
  var dataSource: ArtistDetailModel.DataSource
  
  private var factory: ArtistDetailInteractorFactorable.InteractableFactory
  private var presenter: ArtistDetailPresentationLogic
  
  init(factory: ArtistDetailInteractorFactorable.InteractableFactory, viewController: ArtistDetailDisplayLogic?, dataSource: ArtistDetailModel.DataSource) {
    self.factory = factory
    self.dataSource = dataSource
    self.presenter = factory.makePresenter(viewController: viewController)
  }
}


// MARK: - ArtistDetailBusinessLogic
extension ArtistDetailInteractor: ArtistDetailBusinessLogic {
  
  func doRequest(_ request: ArtistDetailModel.Request) {
    DispatchQueue.global(qos: .userInitiated).async {
      
      switch request {
        
      case .prepareView:
        self.prepareView()
      }
    }
  }
}


// MARK: - Private Zone
private extension ArtistDetailInteractor {
  
  func prepareView() {
    let service = factory.makeApiService()
    LoaderView.toggleUniversalLoadingView(true)
  
    service.getAlbumsListLastFM(characterId: dataSource.artistId, limit: 50) { (result, _) in
      LoaderView.toggleUniversalLoadingView(false)
      switch result {
      case let .success(info):
        if let _ = info.topalbums {
          self.presenter.presentResponse(.prepareView(info: info))
        }
        
      case .failure:
        let errorModel = ErrorHelper.createGenericError()
        self.presenter.presentResponse(.showError(model: errorModel))
      }
    }
    
  }
}
