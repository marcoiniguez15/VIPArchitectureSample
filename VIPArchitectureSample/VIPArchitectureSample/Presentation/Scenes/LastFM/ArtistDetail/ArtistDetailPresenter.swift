//
//  ArtistDetailPresenter.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 24/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation
import UIKit

protocol ArtistDetailPresentationLogic {
  func presentResponse(_ response: ArtistDetailModel.Response)
}

final class ArtistDetailPresenter {
  private weak var viewController: ArtistDetailDisplayLogic?
  
  init(viewController: ArtistDetailDisplayLogic?) {
    self.viewController = viewController
  }
}


// MARK: - ArtistDetailPresentationLogic
extension ArtistDetailPresenter: ArtistDetailPresentationLogic {
  
  func presentResponse(_ response: ArtistDetailModel.Response) {
    
    switch response {
      
    case let .prepareView(info):
      self.prepareView(data: info)
      
    case let .showError(model):
      self.viewController?.displayViewModel(.showError(model: model))
    }
  }
}


// MARK: - Private Zone
private extension ArtistDetailPresenter {
  
    func prepareView(data: ArtistDetailEntity) {
        let viewModels = data.items.compactMap { album -> ArtistDetailModel.CellModel in
            return ArtistDetailModel.CellModel(title: album.title, rank: album.rank, imageURL: album.imageURL, description: album.description)
        }
        self.viewController?.displayViewModel(.prepareView(viewModelData: ArtistDetailModel.ViewDataSource(title: data.title, items: viewModels)))
  }
}
