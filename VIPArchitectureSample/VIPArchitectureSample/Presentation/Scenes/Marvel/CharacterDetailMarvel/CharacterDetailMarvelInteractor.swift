//
//  CharacterDetailMarvelInteractor.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 6/7/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias CharacterDetailMarvelInteractable = CharacterDetailMarvelBusinessLogic & CharacterDetailMarvelDataStore

protocol CharacterDetailMarvelBusinessLogic {
  
  func doRequest(_ request: CharacterDetailMarvelModel.Request)
}

protocol CharacterDetailMarvelDataStore {
  var dataSource: CharacterDetailMarvelModel.DataSource { get }
}

final class CharacterDetailMarvelInteractor: CharacterDetailMarvelDataStore {
  
  var dataSource: CharacterDetailMarvelModel.DataSource
  
  private var factory: CharacterDetailMarvelInteractorFactorable.InteractableFactory
  private var presenter: CharacterDetailMarvelPresentationLogic
  
  init(factory: CharacterDetailMarvelInteractorFactorable.InteractableFactory, viewController: CharacterDetailMarvelDisplayLogic?, dataSource: CharacterDetailMarvelModel.DataSource) {
    self.factory = factory
    self.dataSource = dataSource
    self.presenter = factory.makePresenter(viewController: viewController)
  }
}


// MARK: - CharacterDetailMarvelBusinessLogic
extension CharacterDetailMarvelInteractor: CharacterDetailMarvelBusinessLogic {
  
  func doRequest(_ request: CharacterDetailMarvelModel.Request) {
    DispatchQueue.global(qos: .userInitiated).async {
      
      switch request {
        
      case .prepareCharactersDetail:
        self.prepareCharactersDetail()
      }
    }
  }
}


// MARK: - Private Zone
private extension CharacterDetailMarvelInteractor {
  
  func prepareCharactersDetail() {
    let service = factory.makeApiService()
      LoaderView.toggleUniversalLoadingView(true)
      service.getCharacterDetailMarvel(id: dataSource.characterId) { (result, _) in 
      LoaderView.toggleUniversalLoadingView(false)
      switch result {
      case let .success(list):
        if let data = list.data, let results = data.results, let item = results.first {
          self.presenter.presentResponse(.prepareCharactersDetail(data: item))
        }
        
      case .failure:
        let errorModel = ErrorHelper.createGenericError()
        self.presenter.presentResponse(.showError(model: errorModel))
      }
    }
    
  }
}
