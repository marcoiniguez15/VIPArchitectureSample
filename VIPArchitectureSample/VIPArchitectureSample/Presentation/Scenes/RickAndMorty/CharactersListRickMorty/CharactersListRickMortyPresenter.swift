//
//  CharactersListRickMortyPresenter.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 23/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

protocol CharactersListRickMortyPresentationLogic {
  func presentResponse(_ response: CharactersListRickMortyModel.Response)
}

final class CharactersListRickMortyPresenter {
  private weak var viewController: CharactersListRickMortyDisplayLogic?
  
  init(viewController: CharactersListRickMortyDisplayLogic?) {
    self.viewController = viewController
  }
}


// MARK: - CharactersListRickMortyPresentationLogic
extension CharactersListRickMortyPresenter: CharactersListRickMortyPresentationLogic {
  
  func presentResponse(_ response: CharactersListRickMortyModel.Response) {
    
    switch response {
      
    case let .prepareCharactersListRickMorty(list):
      self.prepareCharactersListRickMorty(data: list)
      
    case let .showError(model):
      self.viewController?.displayViewModel(.showError(model: model))
    }
  }
}


// MARK: - Private Zone
private extension CharactersListRickMortyPresenter {
  func prepareCharactersListRickMorty(data: [CharactersListRickMortyItemEntity]) {
    let title = "Characters List"
    let items = data.compactMap { character -> CharactersListRickMortyModel.CellModel in
        return CharactersListRickMortyModel.CellModel(name: character.name, imageURL: character.imageURL, status: character.status, species: character.species)
    }
    
    self.viewController?.displayViewModel(.prepareCharactersListRickMorty(
                                            viewModelData: CharactersListRickMortyModel.ViewDataSource(title: title, items: items)))
  }
}
