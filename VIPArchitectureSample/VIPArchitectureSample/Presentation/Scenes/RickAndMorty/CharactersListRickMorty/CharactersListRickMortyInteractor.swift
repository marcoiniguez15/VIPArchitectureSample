//
//  CharactersListRickMortyInteractor.swift
//  VIPArchitectureSample
//
//  Created by marco.iniguez.ollero on 23/2/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias CharactersListRickMortyInteractable = CharactersListRickMortyBusinessLogic & CharactersListRickMortyDataStore

protocol CharactersListRickMortyBusinessLogic {
  
  func doRequest(_ request: CharactersListRickMortyModel.Request)
}

protocol CharactersListRickMortyDataStore {
  var dataSource: CharactersListRickMortyModel.DataSource { get }
}

final class CharactersListRickMortyInteractor: CharactersListRickMortyDataStore {
  
  var dataSource: CharactersListRickMortyModel.DataSource
  
  private var factory: CharactersListRickMortyInteractorFactorable.InteractableFactory
  private var presenter: CharactersListRickMortyPresentationLogic
  
  init(factory: CharactersListRickMortyInteractorFactorable.InteractableFactory, viewController: CharactersListRickMortyDisplayLogic?, dataSource: CharactersListRickMortyModel.DataSource) {
    self.factory = factory
    self.dataSource = dataSource
    self.presenter = factory.makePresenter(viewController: viewController)
  }
}


// MARK: - CharactersListRickMortyBusinessLogic
extension CharactersListRickMortyInteractor: CharactersListRickMortyBusinessLogic {
  
  func doRequest(_ request: CharactersListRickMortyModel.Request) {
    DispatchQueue.global(qos: .userInitiated).async {
      
      switch request {
        
      case let .prepareCharactersListRickMorty(page, nameFilter):
        self.prepareCharactersListRickMorty(page: page, nameFilter: nameFilter)
      }
    }
  }
}


// MARK: - Private Zone
private extension CharactersListRickMortyInteractor {
  
    func prepareCharactersListRickMorty(page: Int, nameFilter: String?) {
        if page <= (self.dataSource.numberPages - 1) {
            let useCase = factory.makeFetchCharactersUseCase()
            if page == 0 {
                LoaderView.toggleUniversalLoadingView(true)
            }
            if let name = nameFilter {
                if let nameFilterDataSource = dataSource.nameFilter, nameFilterDataSource != name {
                    self.dataSource.characterList.removeAll()
                }
                
                if dataSource.nameFilter == nil {
                    self.dataSource.characterList.removeAll()
                }
                dataSource.nameFilter = name
            }
            
            Task { @MainActor in
                do {
                    let result = try await useCase.execute(FetchCharacterListRickMortyUseCaseParameters(page: page, nameFilter: nameFilter))
                    LoaderView.toggleUniversalLoadingView(false)
                    self.dataSource.numberPages = result.numberPages
                    self.dataSource.characterList.append(contentsOf: result.items)
                    self.presenter.presentResponse(.prepareCharactersListRickMorty(data: self.dataSource.characterList))
                } catch {
                    LoaderView.toggleUniversalLoadingView(false)
                    let errorModel = ErrorHelper.createGenericError()
                    self.presenter.presentResponse(.showError(model: errorModel))
                }
            }
        }
    }
}
